# -*- coding: utf-8 -*-
"""stock-price-prediction-using-linear-regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P5xd9zsmygjIemKOKslu53O_7kQIz3rr
"""

import numpy as np
import pandas as pd
from sklearn import preprocessing
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

data = pd.read_csv("/content/Quote-Equity-PAYTM-EQ-18-11-2022-to-18-11-2023.csv")

data.head()
#print("ajbdahbda")

data.info()

data.describe()

print(data.head())

data.head()

import pandas as pd
print(data.info())



X_paytm = data[['HIGH ', 'LOW ', 'OPEN ']].values
y_paytm = data['close '].values

X_paytm_train, X_paytm_test, y_paytm_train, y_paytm_test = train_test_split(X_paytm,y_paytm, test_size=0.3, random_state=1)

regressor = LinearRegression()

regressor.fit(X_paytm_train, y_paytm_train)

print(regressor.coef_)

print(regressor.intercept_)

predicted = regressor.predict(X_paytm_test)

print(predicted)

data1 = pd.DataFrame({'Actual': y_paytm_test.flatten(), 'Predicted' : predicted.flatten()})

import math
print('Mean Absolute Error:', metrics.mean_absolute_error(y_paytm_test,predicted))
print('Mean Squared Error:', metrics.mean_squared_error(y_paytm_test,predicted))
print('Root Mean Squared Error:', math.sqrt(metrics.mean_squared_error(y_paytm_test,predicted)))

graph = data.head(20)

graph.plot(kind='bar')

import plotly.graph_objects as go

fig = go.Figure(data=[go.Candlestick(x=data['Date '],
                open=data['OPEN '],
                high=data['HIGH '],
                low=data['LOW '],
                close=data['close '])])

fig.update_layout(title='Stock Price  Chart', xaxis_title='Date', yaxis_title='Price')
fig.show()

fig, ax1 = plt.subplots(figsize=(10, 5))

color = 'tab:red'
ax1.set_xlabel('Date ')
ax1.set_ylabel('Price ', color=color)
ax1.plot(data['Date '], data['close '], color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
color = 'tab:blue'
ax2.set_ylabel('Volume ', color=color)
ax2.bar(data['Date '], data['VOLUME '], alpha=0.3, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped
plt.show()

data['HIGH '] = data['close '].rolling(window=50).mean()

plt.figure(figsize=(10, 5))
plt.plot(data['Date '], data['close '], label='Stock Price')
plt.plot(data['Date '], data['HIGH '], label='50-Day Moving Average', linestyle='--')
plt.title('Stock Price with Moving Average')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.show()

